{"version":3,"sources":["cue_list/core.cljs"],"mappings":"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","names":["cue-list.core/pdfjs","cue_list.core.goog$module$goog$object.get","js/window","js/cue-list","js/cue-list.core","js/cue-list.core.state","cue-list.core/state","reagent.core.atom","js/cue-list.core.APP","cue-list.core/APP","com.fulcrologic.fulcro.application.fulcro_app","options__22597__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__30904","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/cue-list.core.Nav-Bar","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","cue-list.core/Nav-Bar","this","page","zoom","rotate","props","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","cue-list.core/ui-navbar","com.fulcrologic.fulcro.components.factory","_","map__30905","js/cue-list.core.Cue","cue-list.core/Cue","number","description","action","goog.string/format","cue-list.core/ui-cue","com.fulcrologic.fulcro.components.get_query","js/cue-list.core.CueList","cue-list.core/CueList","cljs.core.map","cue-list.core/ui-cue-list","params","com.fulcrologic.fulcro.components/make-state-map","map__30906","js/cue-list.core.Root","cue-list.core/Root","cues"],"sourcesContent":["(ns cue-list.core\n  (:require\n   [goog.object :as gobj]\n   [goog.string :as gstring]\n    goog.string.format\n   [\"react\" :as react]\n   [reagent.core :as reagent]\n   [reagent.dom :as rdom]\n   [com.fulcrologic.fulcro.application :as app]\n   [com.fulcrologic.fulcro.dom :as dom]\n   [com.fulcrologic.fulcro.algorithms.merge :as merge]\n   [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n   )\n)\n\n(def ^js pdfjs (gobj/get js/window \"pdfjs-dist/build/pdf\"))\n\n\n\n\n;; TODO: create spec/schema for cue map\n;; CUE\n;; - :position  - not editable\n;; - :cue-number - editable, auto increment\n;; - :description - editable\n;; - :action - editable\n;;\n;; TODO: should cues be { \"cue-number\" { info map } }?\n\n\n;; TODO: spec out state, cues\n;;\n(defonce state (reagent/atom {:page 16\n                              :zoom 1\n                              :selected-cue-idx nil\n                              :rotate 0\n                              :cues []}))\n\n;;;; FULCRO ;;;;\n(defonce APP (app/fulcro-app))\n\n(defsc Nav-Bar [this {:keys [page zoom rotate] :as props}]\n  {}\n  (dom/div (dom/div \"page: \" page)\n           (dom/div \"zoom: \" zoom)\n           (dom/div \"rotate: \" rotate)))\n\n(def ui-navbar (comp/factory Nav-Bar {:keyfn :ui/page}))\n\n(defsc Cue [this {:cue/keys [number description action]}]\n  {:query [:cue/number :cue/description :cue/action]\n   :ident :cue/number}\n  ;; (dom/div (str props))\n  (dom/div (gstring/format \"number: %s action: %s\" number action))\n  )\n\n(def ui-cue (comp/factory Cue {:keyfn :cue/number}))\n(comp/get-query Cue)\n\n(defsc CueList [this props]\n  {\n   ;; :ident (fn []  [:cues])\n   :query [{:cue/list (comp/get-query Cue)}]\n   }\n  (dom/div\n   (dom/ul\n    (map ui-cue (:cue/list props)))))\n\n(comp/get-query CueList)\n(def ui-cue-list (comp/factory CueList))\n\n(defsc Root [this {:root/keys [cues]}]\n  {\n   :query [{:root/cues (comp/get-query CueList)}]\n   :initial-state {:root/cues []}\n   }\n  (dom/div\n   ;; (ui-navbar ui)\n   (dom/div \"root\")\n   (ui-cue-list cues)\n   ))\n(comp/get-query Root)\n\n(comment\n  (reset! (::app/state-atom APP) {:ui {:page 16\n                                       :zoom 1\n                                       :selected-cue-idx nil\n                                       :rotate 0}\n                                  :cues [{:cue/number 1\n                                          :cue/position [0 0]\n                                          :cue/page 16\n                                          :cue/description \"test cue\"\n                                          :cue/action \"test action\"}\n                                         ]})\n  (:cues (deref (::app/state-atom APP)))\n  (app/mount! APP Root \"fulcro-app\")\n  (app/schedule-render! APP)\n  ;; can merge in components\n  (reset! (::app/state-atom APP) {:root/cues {:cue/list []} :ui {}})\n  (merge/merge-component! APP Cue {:cue/number 2\n                                   :cue/position [10 10]\n                                   :cue/page 16\n                                   :cue/description \"test cue\"\n                                   :cue/action \"test action\"}\n                          :append [:root/cues :cue/list]\n                          )\n  (merge/merge-component! APP Cue {:cue/number 3\n                                   :cue/position [10 10]\n                                   :cue/page 16\n                                   :cue/description \"test cue\"\n                                   :cue/action \"test action\"}\n                          :append [:root/cues :cue/list])\n  (app/current-state APP)\n  )\n\n\n\n(comment\n\n  (reset! state {:page 16\n          :zoom 1\n          :selected-cue-idx nil\n          :rotate 0\n          :cues []})\n  (swap! state assoc :cues '[])\n  (swap! state assoc :page 16)\n  @state\n  )\n\n\n;; (defn dom-point-vec [point]\n;;   [(.-x point) (.-y point)])\n\n;; (defn viewport-point-to-doc-point [v-point viewport]\n;;   (let [trans-mat (.-transform viewport)]\n;;     (dom-point-vec (.transformPoint (.inverse (js/DOMMatrix. (.-transform viewport)))\n;;                                     (js/DOMPoint. (nth v-point 0) (nth v-point 1))))))\n\n;; (defn doc-point-to-view-point [doc-point viewport]\n;;   (dom-point-vec (.transformPoint (js/DOMMatrix. (.-transform viewport))\n;;                                   (js/DOMPoint. (nth doc-point 0) (nth doc-point 1)))))\n\n;; (defn cue-flag-points [origin]\n;;   [\n;;    origin\n;;    [(- (first origin) 10) (- (second origin) 10)]\n;;    [(- (first origin) 50) (- (second origin) 10)]\n;;    [(- (first origin) 50) (+ (second origin) 10)]\n;;    [(- (first origin) 10) (+ (second origin) 10)]\n;;    ]\n;;   )\n\n;; (comment\n;;   (swap! state assoc :cues '[])\n;;   (.inverse (js/DOMMatrix. (.-transform (.-viewport js/Window))))\n;;   (.-height (.-viewport js/Window))\n;;   (.-width (.-viewport js/Window))\n;;   (first (viewport-point-to-doc-point [0 0] (.-viewport js/Window)))\n;;   (last (viewport-point-to-doc-point [0 0] (.-viewport js/Window)))\n;;   )\n\n\n;; (defn on-canvas-click [event]\n;;   ;; translat page coordinate to doc coordinate\n;;   (let [rect (.getBoundingClientRect event.target)\n;;         vp-x (- (.-pageX event) (.-left rect))\n;;         vp-y (- (- (.-pageY event) (.-top rect)) (.-scrollY js/window))\n;;         doc-point (viewport-point-to-doc-point [vp-x vp-y] (.-viewport js/Window))\n;;         ;; TODO: increment cue number by finding cue number of closest position\n;;         last-cue (or (:cue-number (last (sort-by :cue-number (:cues @state)))) 0)\n;;         new-cue {:cue-number (+ 1 last-cue)\n;;                  :page (:page @state)\n;;                  :point doc-point\n;;                  :description \"\"\n;;                  :action \"\"}]\n;;     (swap! state assoc :cues (conj (:cues @state) new-cue))\n;;     (swap! state assoc :selected-cue-idx (.indexOf (:cues @state) new-cue))\n;;     ))\n\n;; (comment\n;;   (swap! state assoc :cues '[])\n;;   (.indexOf (:cues @state) (second (:cues @state)))\n;;   )\n\n;; (defn sorted-cues [cues]\n;;   (->>\n;;    cues\n;;    (sort-by #(first (:point %)))\n;;    (sort-by #(second (:point %)))\n;;    reverse\n;;    (sort-by :page)))\n\n\n;; (defn render-cue-flags [context viewport]\n;;   ;; (js/console.log (.keys js/Object viewport))\n\n;;     ;; rotate render context\n;;   (doseq [cue (filter #(= (:page %) (:page @state)) (:cues @state))]\n;;     (let [flag-points (cue-flag-points (doc-point-to-view-point (:point cue) viewport))\n;;           selected (= (:selected-cue-idx @state) (.indexOf (:cues @state) cue))\n;;           ]\n;;       (if selected\n;;         (set! (. context -fillStyle) \"rgba(204, 255, 110, 0.5)\")\n;;         (set! (. context -fillStyle) \"rgba(244, 231, 34, 0.5)\"))\n;;       (.beginPath context)\n;;       ;; draw cue\n;;       (.moveTo context\n;;                (first  (nth flag-points 0))\n;;                (second (nth flag-points 0)))\n;;       (.lineTo context\n;;                (first  (nth flag-points 1))\n;;                (second (nth flag-points 1)))\n;;       (.lineTo context\n;;                (first  (nth flag-points 2))\n;;                (second (nth flag-points 2)))\n;;       (.lineTo context\n;;                (first  (nth flag-points 3))\n;;                (second (nth flag-points 3)))\n;;       (.lineTo context\n;;                (first  (nth flag-points 4))\n;;                (second (nth flag-points 4)))\n;;       (.fill context)\n;;       (set! (. context -fillStyle) (if selected\n;;                                      \"rgba(0, 0, 0, 1)\"\n;;                                      \"rgba(0, 0, 0, 0.2)\"))\n;;       (set! (. context -font) \"25px sans-serif\")\n;;       (.fillText context (:cue-number cue)\n;;                  (first  (nth flag-points 3))\n;;                  (second (nth flag-points 3)))\n;;       )))\n\n;; (comment\n;;   (swap! state assoc :cues '[])\n;;   @state\n;;   )\n\n;; (defn update-doc-dims [width height]\n;;   (swap! state assoc :doc-dims [width height])\n;;   )\n\n;; (defn pdf-canvas [{:keys [url state]}]\n;;   ;; ref\n;;   (let [canvas-ref (react/useRef nil)]\n;;     ;; initialize and attach pdfjs when the canvas is mounted\n;;     (react/useEffect\n;;      (fn []\n;;        (do\n;;          (-> (.getDocument pdfjs url)\n;;              (.-promise)\n;;              (.then (fn [^js pdf] (.getPage pdf (:page state))))\n;;              (.then (fn [^js page]\n;;                       (let [viewport (.getViewport page #js {:scale (:zoom state)\n;;                                                              :rotation (:rotate state)})\n;;                             canvas (.-current canvas-ref)\n;;                             context (.getContext canvas \"2d\")\n;;                             render-context\n;;                             #js {:canvasContext context\n;;                                  :viewport viewport}]\n;;                         (set! canvas -height (.-height viewport))\n;;                         (update-doc-dims (.-width viewport) (.-height viewport))\n;;                         (set! canvas -width (.-width viewport))\n;;                         (set! (. js/Window -viewport) viewport) ;; TODO: set on state?\n;;                         (-> (.render page render-context)\n;;                             (.-promise)\n;;                             (.then (fn [] (js/console.log \"PDF Page rendered.\"))))\n;;                         )))))\n;;        (fn []\n;;          ;; not sure if there is supposed to be any cleanup for the pdfjs objects\n;;          ;; might need to store those somewhere and dispose of them properly here\n;;          ;; (js/console.log \"cleanup\")\n;;          ))\n;;      ;; ensure this only re-runs when url or nav changes\n;;      #js [url (:page state) (:zoom state) (:rotate state)])\n;;     [:canvas {:ref canvas-ref\n;;               :id \"document-canvas\"\n;;               :style {:z-index 0\n;;                       :position \"absolute\"}}])\n  ;; )\n\n;; (defn cue-overlay [{:keys [state]}]\n;;   (let [canvas-ref (react/useRef nil)\n;;         viewport (.-viewport js/Window)\n;;         doc-canvas (.getElementById js/document \"document-canvas\")\n;;         ]\n;;     (react/useEffect\n;;      (fn []\n;;        (do\n;;          (let [\n;;                canvas (.-current canvas-ref)\n;;                context (.getContext canvas \"2d\")\n;;                ]\n;;            (do\n;;              (.reset context)\n;;              (.addEventListener canvas \"click\" on-canvas-click)\n;;              ;; (.reset canvas)\n;;              (render-cue-flags context viewport))\n;;            ))\n;;        (fn [] )) ;; (js/console.log \"cleanup\"))\n;;      #js [state])\n;;     [:canvas {:ref canvas-ref\n;;               :id \"overlay-canvas\"\n;;               :width (first (:doc-dims state))\n;;               :height (second (:doc-dims state))\n;;               :style {:position \"absolute\" :z-index 1}}])\n;;   )\n\n;; (comment\n;;   (js/console.log (.-viewport js/Window))\n;;   (.-x (.getBoundingClientRect (.getElementById js/document \"document-canvas\")))\n;;   (.-y (.getBoundingClientRect (.getElementById js/document \"document-canvas\")))\n;;   )\n\n;; ;; UI ACTIONS\n;; (defn dec-page []\n;;   (swap! state #(update % :page dec)))\n;; (defn inc-page []\n;;   (swap! state #(update % :page inc)))\n;; (defn dec-zoom []\n;;   (swap! state #(update % :zoom (fn [i] (- i 0.25)))))\n;; (defn inc-zoom []\n;;   (swap! state #(update % :zoom (fn [i] (+ i 0.25)))))\n;; (defn rotate-clockwise []\n;;   (swap! state #(update % :rotate (fn [i] (mod (+ i 90) 360)))))\n;; (defn rotate-counterclockwise []\n;;   (swap! state #(update % :rotate (fn [i] (mod (- i 90) 360)))))\n;; (defn on-cue-click [cue]\n;;   ;; TODO: one swap\n;;   (swap! state assoc :page (:page cue))\n;;   (swap! state assoc :selected-cue-idx (.indexOf (:cues @state) cue)))\n;; (defn remove-cue [cue]\n;;   (if (= (.indexOf (:cues @state) cue) (:selected-cue-idx @state))\n;;     (swap! state assoc :selected-cue-idx nil)\n;;     )\n;;   (swap! state assoc :cues (vec (filter #(not= (:cue-number cue) (:cue-number %)) (:cues @state))))\n;;   )\n\n;; (comment\n;;   (swap! state assoc :cues '[])\n;;   @state\n;;   (:selected-cue-idx @state)\n;;   )\n\n;; (defn update-cue-field [cue kw val]\n;;   (let [idx (.indexOf (:cues @state) cue)]\n;;     (swap! state assoc :cues\n;;            (assoc (:cues @state) idx (assoc (nth (:cues @state) idx) kw val)))))\n;; (comment\n;;   @state\n;;   (update-cue-field (first (:cues @state)) :description \"test\")\n;;   (first (:cues @state))\n;;   (:selected-cue-idx @state)\n;;   )\n\n\n\n;; (defn cue-button-li [cue]\n;;   (if (= (.indexOf (:cues @state) cue) (:selected-cue-idx @state))\n;;     [:li {:style {:list-style-type \"none\"\n;;                   :border-style \"inset\"}}\n;;      [:form\n;;       ;; TODO on submit form, update state\n;;       {:on-submit #((.preventDefault %)\n;;                     (swap! state assoc :selected-cue-idx nil))}\n;;       ;;\n;;       [:label {:for \"cue-number\"} \"Cue Number\"]\n;;       [:input {:type \"text\"\n;;                :id \"cue-number\"\n;;                :name \"cue-number\"\n;;                :value (:cue-number cue)\n;;                :on-change #(update-cue-field cue :cue-number (-> % .-target .-value))}] [:label {:for \"action\"} \"Action\"]\n;;       [:input {:type \"text\"\n;;                :id \"action\"\n;;                :name \"action\"\n;;                :value (:action cue)\n;;                :on-change #(update-cue-field cue :action (-> % .-target .-value))\n;;                }]\n;;       [:label {:for \"description\"} \"Description\"]\n;;       [:input {:type \"text\"\n;;                :id \"description\"\n;;                :name \"description\"\n;;                :value (:description cue)\n;;                :on-change #(update-cue-field cue :description (-> % .-target .-value))\n;;                }]\n;;       [:input {:type \"submit\" :hidden true}]]\n;;      [:input {:type \"button\"\n;;               :on-click (fn [e] (remove-cue cue))\n;;               :value \"Delete Cue\"}\n;;       ]]\n;;     ;; display state\n;;     [:li {:style {:list-style-type \"none\"\n;;                   :border-style \"none\"\n;;                   }}\n;;      [:input {:type \"button\"\n;;               :on-click (fn [e] (on-cue-click cue))\n;;               :value (gstring/format \"cue: %s page: %s action: %s description: %s\"\n;;                                      (:cue-number cue)\n;;                                      (:page cue)\n;;                                      (:action cue)\n;;                                      (:description cue))}]\n;;      [:input {:type \"button\"\n;;               :on-click (fn [e] (remove-cue cue))\n;;               :value \"x\"}\n;;       ]]))\n\n;; APP\n;; (defn ui []\n;;   [:div [:h1 \"Script Cue Annotator\"]\n;;    [:div {:id \"nav\" :style {:display \"flex\" :align-items \"flex-start\" :column-gap \"20px\"}}\n;;     [:div {:style {:display \"flex\" :align-items \"flex-start\" :column-gap \"5px\"}}\n;;      [:input {:type \"button\" :value (gstring/format \"< %s\" (dec (:page @state)))  :on-click dec-page}]\n;;      [:input {:type \"button\" :value (gstring/format \"> %s\" (inc (:page @state))) :on-click inc-page}]\n;;      [:div \"page: \" (:page @state)]]\n;;     [:div {:style {:display \"flex\" :align-items \"flex-start\" :column-gap \"5px\"}}\n;;      [:input {:type \"button\" :value \"-\" :on-click dec-zoom}]\n;;      [:input {:type \"button\" :value \"+\" :on-click inc-zoom}]\n;;      (gstring/format \"zoom: %s\" (:zoom @state))]\n;;     [:div {:style {:display \"flex\" :align-items \"flex-start\" :column-gap \"5px\"}}\n;;      \"rotate: \"\n;;      [:input {:type \"button\" :value \"\u21ba\" :on-click rotate-counterclockwise}]\n;;      [:input {:type \"button\" :value \"\u21bb\" :on-click rotate-clockwise}]\n;;      [:div \"rotation: \" (:rotate @state)]]]\n;;    [:div {:style {:display \"flex\" :align-items \"flex-start\"}}\n;;     [:div {:id \"canvas-container\" :style {:position \"relative\"\n;;                                           :flex-shrink 0\n;;                                           :width (first (:doc-dims @state))\n;;                                           :height (second (:doc-dims @state))}}\n;;      [:f> cue-overlay {:state @state}]\n;;      [:f> pdf-canvas {:url \"test.pdf\" :state @state}] ;; TODO: only view the ux/nav state of\n;;      ]\n;;     [:div \"cues\"\n;;      [:ul (for [cue (sorted-cues (:cues @state))]\n;;             ^{:key (.indexOf (:cues @state) cue)} [cue-button-li cue])]]]])\n\n;; (defn ^:dev/before-load stop []\n;;   (js/console.log \"stop\"))\n\n;; (defn ^:dev/after-load start []\n;;   (rdom/render [ui] (js/document.querySelector \"#app\"))\n;;   )\n\n\n;; (defn init []\n;;   (js/console.log \"starting\")\n;;   ;; need to tell the lib where to load the worker from, also using same CDN\n;;   (set! (.. pdfjs -GlobalWorkerOptions -workerSrc) \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js\")\n;;   (start))\n"]}